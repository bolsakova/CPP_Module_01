#include "Zombie.hpp"

// конструктор с параметром
//
// initialization list:
//		- атрибут сразу создается с нужным значением (в нашем случае с именем)
//		- тело конструктора остается пустым
// синтаксис:
//		Конструктор(параметры) : атрибут1(значение1), атрибут2(значение2) {}
// кейсы:
//		- при создании с именем
//		- НЕ работает с массивами
Zombie::Zombie(std::string name ) : name(name) {

}

// конструктор по умолчанию
//
// когда создается массив, компилятор автоматически вызывает конструктор по умолчанию для каждого элемента
// кейсы:
//		- при создании массива (наш случай)
//		- при создании отдельного зомби БЕЗ параметров
//		- при создании на heap без параметров
Zombie::Zombie() : name("Unknown") {

}

Zombie::~Zombie(void) {
	std::cout << "Zombie " << name << " is destroyed" << std::endl;
}

void Zombie::announce( void ) {
	std::cout << name << ": BraiiiiiiinnnzzzZ..." << std::endl;
}

// с помощью this разрешается конфликт имен
// в данном случае у нас одинаковые имена для атрибута класса и для параметра функции
// без this - name=name => в данном случае мы присваиваем параметр самому себе;
//						   компилятор думает: параметр = параметр;
//						   поэтому атрибут класса остается неизменным и имя зомби не меняется
void Zombie::setName(std::string name) {
	this->name = name; // присвоение нового имени
	// this->name атрибут класса; name - параметр функции
}
